name: OWASP ZAP Scan

on:
  push:
    branches:
      - main

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Verify the rules file
      - name: Verify Rules File
        run: ls -l .github/workflows/

      # Step 3: Debug Rules File
      - name: Debug Rules File
        run: cat .github/workflows/rules.zap

      # Step 4: Run OWASP ZAP Full Scan
      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'https://mlshoppreprod.mlhuillier.com/jewelryback/Account/OrderDetails?OrderNumber=MLMDKEXTVBL&OrderId=O20241007135949882172'
          rules_file_name: '.github/workflows/rules.zap'
          artifact_name: zap_scan  # Ensure this matches the download step

      # Step 5: Download ZAP Scan Artifact (zap_scan.zip)
      - name: Download ZAP Scan Artifact
        uses: actions/download-artifact@v3
        with:
          name: zap_scan  # Ensure this matches the artifact name in the previous step
          path: zap_scan/

      # Step 6: List downloaded files (for debugging)
      - name: List downloaded files
        run: |
          echo "Listing all files in zap_scan directory:"
          find zap_scan/

      # Step 7: Unzip the downloaded artifact (if it's a ZIP file)
      - name: Unzip ZAP Scan Report
        run: |
          unzip zap_scan/zap_scan.zip -d zap_scan/

      # Step 8: Parse ZAP Results (filter the JSON report)
      - name: Parse ZAP Results
        run: |
          REPORT_FILE="zap_scan/report_json.json"
          if [ -f "$REPORT_FILE" ]; then
            # Count FAIL-NEW and WARN-NEW
            WARN_NEW=$(jq '[.site[].alerts[] | select(.risk == "Medium" or .risk == "High")] | length' "$REPORT_FILE")
            FAIL_NEW=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' "$REPORT_FILE")
            echo "WARN_NEW=$WARN_NEW" >> $GITHUB_ENV
            echo "FAIL_NEW=$FAIL_NEW" >> $GITHUB_ENV
          else
            echo "Report file not found!"
            exit 1
          fi

      # Step 9: Check Thresholds and set status based on findings
      - name: Check Thresholds
        run: |
          if [ "$FAIL_NEW" -gt 0 ]; then
            echo "Scan failed due to high-risk vulnerabilities!"
            exit 1
          elif [ "$WARN_NEW" -gt 5 ]; then
            echo "Warning: $WARN_NEW medium-risk vulnerabilities detected!"
          else
            echo "Scan passed without critical issues."
          fi

      # Step 10: Upload filtered report artifact (if needed)
      - name: Upload Filtered ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: filtered_zap_report
          path: zap_scan/filtered_report.html  # Path to your filtered report (HTML)
